---
interface Props {
    institution: string;
    area: string;
    studyType: string;
    startDate: string;
    endDate?: string;
    gpa?: string;
    courses?: string[];
    website?: string;
}

const {
    institution,
    area,
    studyType,
    startDate,
    endDate,
    gpa,
    courses = [],
    website
} = Astro.props;

const formatDate = (dateString: string) => {
    if (!dateString) return 'Present';
    const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'short' };
    return new Date(dateString).toLocaleDateString('en-US', options);
};
---

<article class="mb-10 group transition-all duration-300 hover:translate-x-1">
    <div class="relative pl-10">
        {/* Education icon */}
        <div class="absolute left-0 top-1 w-7 h-7 rounded-full bg-accent/10 border-2 border-accent flex items-center justify-center group-hover:bg-accent/20 transition-colors duration-300">
            <svg class="w-4 h-4 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>
        </div>
        
        <header class="mb-3">
            <div class="flex flex-col gap-2">
                <div class="flex items-start justify-between w-full">
                    <div class="space-y-1">
                        <h3 class="text-xl font-bold text-white group-hover:text-accent transition-colors">
                            {studyType} in {area}
                        </h3>
                    </div>
                    <div class="text-sm text-gray-400 bg-gray-800/50 px-3 py-1 rounded-full border border-gray-700/50 whitespace-nowrap ml-4 mt-0.5">
                        {formatDate(startDate)} - {endDate ? formatDate(endDate) : 'Present'}
                    </div>
                </div>
                    <div class="flex flex-wrap items-center gap-2">
                        {website ? (
                            <a 
                                href={website} 
                                target="_blank" 
                                rel="noopener noreferrer"
                                class="text-accent hover:underline font-medium inline-flex items-center group/institution"
                            >
                                {institution}
                                <span class="ml-1 inline-flex items-center opacity-0 group-hover/institution:opacity-100 transition-opacity">
                                    <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"></path>
                                    </svg>
                                </span>
                            </a>
                        ) : (
                            <span class="font-medium">{institution}</span>
                        )}
                        
                        {gpa && (
                            <span class="text-sm text-gray-400 flex items-center">
                                <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-900/30 text-green-400 border border-green-800/50">
                                    GPA: {gpa}
                                </span>
                            </span>
                        )}
                    </div>
                </div>
                
            </div>
        </header>
        
        {courses && courses.length > 0 && (
            <div class="mt-4 pl-1">
                <h4 class="text-sm font-medium text-gray-300 mb-2">Relevant Coursework</h4>
                <div class="flex flex-wrap gap-2">
                    {courses.map((course, i) => (
                        <span 
                            key={i} 
                            class="text-xs px-3 py-1 bg-gray-800/50 rounded-full text-gray-300 border border-gray-700/50 hover:bg-accent/10 hover:border-accent/30 hover:text-accent transition-colors duration-200"
                            data-animate-on-load
                            style={`--delay: ${i * 50 + 100}ms`}
                        >
                            {course}
                        </span>
                    ))}
                </div>
            </div>
        )}
    </div>
    
    <style>
        [data-animate-on-load] {
            opacity: 0;
            transform: translateY(5px);
            transition: opacity 0.3s ease-out, transform 0.3s ease-out;
            transition-delay: var(--delay, 0ms);
        }
        
        .js-interactive [data-animate-on-load] {
            opacity: 1;
            transform: translateY(0);
        }
    </style>
</article>
