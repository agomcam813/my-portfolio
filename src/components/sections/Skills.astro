---
import Section from "@/components/Section.astro";
import cv from '@cv';

// Import icons
import JavaScriptIcon from '@/icons/javascript.astro';
import TypeScriptIcon from '@/icons/type.astro';
import HtmlIcon from '@/icons/html.astro';
import CssIcon from '@/icons/css.astro';
import TailwindIcon from '@/icons/tailwind.astro';
import NodeIcon from '@/icons/node.astro';
import ReactIcon from '@/icons/react.astro';
import Node from '@/icons/node.astro';
import GitIcon from '@/icons/git.astro';
import GitHubIcon from '@/icons/GitHub.astro';
import MySqlIcon from '@/icons/sql.astro';

// Icons map for skills
const skillIcons = {
  'JavaScript': JavaScriptIcon,
  'TypeScript': TypeScriptIcon,
  'HTML': HtmlIcon,
  'CSS': CssIcon,
  'Tailwind': TailwindIcon,
  'Node': NodeIcon,
  'React': ReactIcon,
  'Next.js': Node,
  'Git': GitIcon,
  'GitHub': GitHubIcon,
  'MySQL': MySqlIcon
};

// Extract data from CV
const { skills = [], languages = [], interests = [], awards = [], certificates = [] } = cv;

// Function to group skills by category
function groupSkills(skills) {
  const categories = {};
  
  skills.forEach(skill => {
    const category = skill.category || 'Other Skills';
    if (!categories[category]) {
      categories[category] = [];
    }
    categories[category].push(skill);
  });
  
  return categories;
}

const skillCategories = groupSkills(skills);
const allCertificates = [...(certificates || []), ...(awards || [])].sort((a, b) => 
  new Date(b.date || 0).getTime() - new Date(a.date || 0).getTime()
);

// Function for animation delay
const getDelay = (index, base = 0) => `${base + (index * 50)}ms`;
---

<Section title="Skills">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-12">
        {/* Left column - Technical skills */}
        <div class="space-y-10">
            <div>
                <h3 class="text-2xl font-bold text-white mb-6">
                    Technical Skills
                </h3>
                
                <div class="space-y-8">
                    {Object.entries(skillCategories).map(([category, skills], index) => (
                        <div key={category} data-animate-on-load style={`--delay: ${getDelay(index, 100)}`}>
                            <h4 class="text-lg font-medium text-gray-300 mb-3">
                                {category}
                            </h4>
                            <div class="flex flex-wrap gap-2">
                                {skills.map((skill) => (
                                    <span 
                                        key={skill.name}
                                        class="px-3 py-1.5 bg-gray-800 rounded-full text-sm text-gray-200 border border-gray-700 hover:bg-accent/10 hover:border-accent/30 hover:text-accent transition-colors flex items-center gap-2"
                                        title={skill.name}
                                    >
                                        {skillIcons[skill.name] ? (
                                            <span class="w-4 h-4 flex-shrink-0 flex items-center">
                                                {(() => {
                                                    const Icon = skillIcons[skill.name];
                                                    return <Icon />;
                                                })()}
                                            </span>
                                        ) : (
                                            <span class="w-4 h-4 flex-shrink-0"></span>
                                        )}
                                        <span class="truncate max-w-[100px]">
                                            {skill.name}
                                        </span>
                                    </span>
                                ))}
                            </div>
                        </div>
                    ))}
                </div>
            </div>
        </div>
        
        {/* Right column - Languages and more */}
        <div class="space-y-10">
            {/* Languages */}
            {languages && languages.length > 0 && (
                <div data-animate-on-load style="--delay: 100ms">
                    <h3 class="text-2xl font-bold text-white mb-6">
                        Languages
                    </h3>
                    
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        {languages.map((language) => {
                            const fluencyLevels = {
                                'Native': 'Native',
                                'Fluent': 'Fluent',
                                'Intermediate': 'Intermediate',
                                'Basic': 'Basic'
                            };
                            
                            const displayFluency = fluencyLevels[language.fluency] || language.fluency;
                            
                            return (
                                <div 
                                    key={language.language}
                                    class="p-4 bg-gray-800/30 rounded-lg border border-gray-700/50 hover:border-accent/30 transition-colors"
                                >
                                    <div class="flex flex-col">
                                        <span class="text-lg font-medium text-white">
                                            {language.language}
                                        </span>
                                        <span class="text-sm text-gray-400">
                                            {displayFluency}
                                        </span>
                                    </div>
                                </div>
                            );
                        })}
                    </div>
                </div>
            )}
            
            {/* Interests */}
            {interests && interests.length > 0 && (
                <div data-animate-on-load style="--delay: 200ms">
                    <h3 class="text-2xl font-bold text-white mb-6">
                        Interests
                    </h3>
                    
                    <div class="flex flex-wrap gap-2">
                        {interests.map((interest) => (
                            <span 
                                key={interest}
                                class="px-3 py-1 bg-gray-800/50 rounded-full text-sm text-gray-200 border border-gray-700/50 hover:bg-accent/10 hover:border-accent/30 hover:text-accent transition-colors"
                            >
                                {interest}
                            </span>
                        ))}
                    </div>
                </div>
            )}
            
            {/* Certifications & Awards */}
            {allCertificates.length > 0 && (
                <div data-animate-on-load style="--delay: 300ms">
                    <h3 class="text-2xl font-bold text-white mb-6">
                        Certifications & Awards
                    </h3>
                    
                    <div class="space-y-4">
                        {allCertificates.map((certificate, index) => (
                            <div 
                                key={`${certificate.name}-${index}`}
                                class="relative pl-5 border-l-2 border-gray-800 hover:border-accent/50 transition-colors py-2"
                            >
                                <div class="absolute -left-[9px] top-4 w-3 h-3 rounded-full bg-gray-900 border-2 border-accent"></div>
                                
                                <h4 class="font-medium text-gray-200">
                                    {certificate.name || certificate.title}
                                </h4>
                                {certificate.issuer && (
                                    <div class="text-sm text-gray-400 mt-1">{certificate.issuer}</div>
                                )}
                                {certificate.date && (
                                    <div class="text-xs text-gray-500 mt-1">
                                        {new Date(certificate.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long' })}
                                    </div>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            )}
        </div>
    </div>
</Section>

<script>
    // Animate elements on scroll
    document.addEventListener('astro:page-load', () => {
        // Add class to document when ready
        document.documentElement.classList.add('js-interactive');
        
        // Animate elements on scroll
        const animateOnScroll = (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0)';
                    observer.unobserve(entry.target);
                }
            });
        };
        
        const observer = new IntersectionObserver(animateOnScroll, {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        });
        
        document.querySelectorAll('[data-animate-on-load]').forEach(element => {
            observer.observe(element);
        });
    });
</script>

<style>
    /* Custom animations */
    [data-animate-on-load] {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.6s ease-out, transform 0.6s ease-out;
        transition-delay: var(--delay, 0ms);
    }
    
    .js-interactivo [data-animate-on-load] {
        opacity: 1;
        transform: translateY(0);
    }
    
    /* Barra de desplazamiento personalizada */
    ::-webkit-scrollbar {
        width: 6px;
        height: 6px;
    }
    
    ::-webkit-scrollbar-track {
        background: rgba(255, 255, 255, 0.05);
        border-radius: 3px;
    }
    
    ::-webkit-scrollbar-thumb {
        background: rgba(255, 255, 255, 0.1);
        border-radius: 3px;
    }
    
    ::-webkit-scrollbar-thumb:hover {
        background: rgba(255, 255, 255, 0.2);
    }
</style>